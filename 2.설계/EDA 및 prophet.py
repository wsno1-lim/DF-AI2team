# -*- coding: utf-8 -*-
"""stock_predict_ver2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k-sDXpe-c6yIZBN8HCR-fFt5U1XHJ12R
"""

pip install -U finance-datareader

pip install --upgrade finance-datareader

from pandas_datareader import data
import pandas as pd
import FinanceDataReader as fdr
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense, Activation
from keras.callbacks import EarlyStopping

def GET_DATA(code, date):
  COMPANY = fdr.DataReader(code, date) #입력 종목에대해 2010년 이후 데이터 가져옴.
  COMPANY = COMPANY.drop(['Open','High','Low', 'Change','Volume'], axis=1)  # close만 가져온다
  COMPANY.columns = [code + '_Close']
  #COMPANY.columns = [code +'_O',code +'_H',code +'_L',code +'_C',code +'_V',code +'_Change']

  KOSPI = fdr.DataReader('KS11', date) #코스피지수
  KOSPI = KOSPI.drop(['Open','High','Low', 'Change','Volume'], axis=1) # close만 가져온다
  KOSPI.columns = ['KOSPI']

  KOSDAQ = fdr.DataReader('KQ11', date) #코스닥지수
  KOSDAQ = KOSDAQ.drop(['Open','High','Low', 'Change','Volume'], axis=1) # close만 가져온다
  KOSDAQ.columns = ['KOSDAQ']

  DJI = fdr.DataReader('DJI', date)  # 다우지수
  DJI = DJI.drop(['Open','High','Low', 'Change','Volume'], axis=1) # close만 가져온다
  DJI.columns = ['DJI']

  SP500 = fdr.DataReader('US500', '2015-01-01') # S&P 500 지수 (NYSE)
  SP500 = SP500.drop(['Open','High','Low', 'Change','Volume'], axis=1) # close만 가져온다
  SP500.columns = ['SP500']

  GOLD = fdr.DataReader('ZG', date) # 금 선물
  GOLD = GOLD.drop(['Open','High','Low', 'Change','Volume'], axis=1) # close만 가져온다
  GOLD.columns = ['GOLD']

  USD_KRW = fdr.DataReader('USD/KRW', date) #환율
  USD_KRW = USD_KRW.drop(['Open','High','Low', 'Change'], axis=1)  # close만 가져온다
  USD_KRW.columns = ['USD_KRW']

  MSCI_KR = fdr.DataReader('156080', date) #MSCI KOREA
  MSCI_KR = MSCI_KR.drop(['Open','High','Low', 'Change','Volume'], axis=1) 
  MSCI_KR.columns = ['MSCI_KR']
  
  VIX = fdr.DataReader(['VIXCLS'], start = date, data_source='fred') # S&P 500 VIX

  # POILDUBUSDM: 두바이유
  # POILWTIUSDM: 서부 텍사스 중질유 
  # 한달에 한번 제공이라 뺌
  OIL = fdr.DataReader(['POILDUBUSDM', 'POILWTIUSDM'],start='2010-01-01', data_source='fred' )

  # M2 통화량
  # NASDAQCOM 나스닥종합지수
  # HSN1F 주택판매지수
  OTHERS = fdr.DataReader(['M2', 'NASDAQCOM', 'HSN1F'], date, data_source='fred')

  #가져온 지표들을 date의 index대로 합친다. 해당 일자에 없는 데이터는 NaN
  df = pd.concat([COMPANY, KOSPI,KOSDAQ, DJI, SP500, GOLD,USD_KRW, MSCI_KR,VIX, OTHERS],axis=1)
  return df

date = '2017' #디폴트 2010년 이후부터 오늘까지 데이터
code = input("회사종목 입력") 
if code is None or code == '' :
      print("종목입력 없으면 삼성전자 수행")
      code = '005930'
df = GET_DATA(code, date)
df

df1=df.dropna(subset=[code+'_Close'])

df1.isnull().sum()

df1 = df1.drop(['SP500', 'MSCI_KR', 'GOLD','HSN1F'], axis=1)
#df1 = df1.drop([code+'_O', code+'_H', code+'_L', code+'_V' ,code+'_Change'], axis=1)
# 결측치가 많은것은 일단 제외, 개별 종가 제외

df1.info()

df1.isnull().sum()

df1=df1.dropna(subset=["DJI"])

df1 = df1.dropna()

df1

returns = pd.DataFrame()
for d in df1:
  returns[d+' pct'] = df1[d].pct_change()
returns.head()

import seaborn as sns
sns.pairplot(returns[1:])

"""#   MACD와 MACD Oscillator 지표"""

COMPANY = fdr.DataReader('005930', '2020-06-01') 
COMPANY = COMPANY.drop(['Open','High','Low', 'Change','Volume'], axis=1)  # close만 가져온다
COMPANY.columns = ['SAMSUNG_C']

COMPANY

def getMACD(df, short=12, long=26, signal=9):
  df['MACD'] = COMPANY['SAMSUNG_C'].ewm(span = short, min_periods = short -1, adjust=False).mean() - COMPANY['SAMSUNG_C'].ewm(span=long, min_periods = long-1, adjust=False).mean()
  df['MACD_Signal'] = df['MACD'].ewm(span=signal, min_periods = signal-1, adjust=False).mean()
  df['MACD_OSC'] = df['MACD'] - df['MACD_Signal']
  return df
COMPANY = getMACD(COMPANY)

COMPANY=COMPANY.dropna()
COMPANY

import plotly.graph_objects as go

fig = go.Figure() 
fig.add_trace(go.Scatter(x=COMPANY.index, y=COMPANY["MACD"], mode='lines', name="MACD")) 
fig.add_trace(go.Scatter(x=COMPANY.index, y=COMPANY["MACD_Signal"], mode='lines', name="MACD_Signal")) 
fig.add_trace(go.Bar(x=COMPANY.index, y=COMPANY["MACD_OSC"], name="MACD_OSC", width=2.5, marker_color='Black')) 
fig.add_trace(go.Scatter(x=COMPANY.index, y=np.zeros(len(COMPANY.index)),name='0', line = dict(color='gray', width=2, dash='dot'))) 
fig.update_layout(title='MACD 16 26 9', xaxis_title='days', yaxis_title='MACD') 
fig.show()

fig = go.Figure() 
fig.add_trace(go.Scatter(x=COMPANY.index, y=COMPANY["MACD_OSC"], mode='lines', name="Close")) 
fig.update_layout(title='Close', xaxis_title='days', yaxis_title='StockValue') 
fig.show()
# 음 -> 양 매수 포인트
# 양 -> 음 매도 포인트

COMPANY = COMPANY.drop(['MACD','MACD_Signal'], axis=1) 
 # MACD_OSC 찍어보기~
COMPANY= COMPANY.dropna()

for col in COMPANY:
    COMPANY[col].plot(figsize=(12,4),label=col)
plt.legend()

COMPANY = COMPANY.reset_index()

COMPANY

#정규화 해주려고 날짜 인덱스는 잠시 다른곳에 저장해두자
DATE = COMPANY['Date']
COMPANY = COMPANY.drop(['Date'], axis=1)

def min_max_normalize(lst):
    normalized = []
    for value in lst:
      normalized_num = (value - min(lst)) / (max(lst) - min(lst))
      normalized.append(normalized_num)
    return normalized

nor_COMPANY = pd.DataFrame()
for col in COMPANY:
  nor_COMPANY[col] = pd.DataFrame(min_max_normalize(COMPANY[col]))

COMPANY

DATE

COMPANY["DATE"] = DATE
COMPANY = COMPANY.set_index("DATE")

for col in COMPANY:
    COMPANY[col].plot(figsize=(12,4),label=col)
plt.legend()





"""정규화

"""

df1
df1 = df1.reset_index()

#정규화 해주려고 날짜 인덱스는 다른곳에 저장해두자
index = df1['index']
y_value = df1[code+'_Close']
x_value = df1.drop(['index', code+'_Close'],axis=1)

x_value

for column_name in x_value:
  x_value[column_name] = pd.DataFrame(min_max_normalize(x_value[column_name]))

x_value

y_value

"""#  Prophet 모델"""

from fbprophet import Prophet # Prophet

pip install workalendar

COMPANY = fdr.DataReader('005930', '2019-01-01') 
COMPANY = COMPANY.drop(['Open','High','Low', 'Change','Volume'], axis=1)  # close만 가져온다
COMPANY.columns = ['SAMSUNG_C']

COMPANY = COMPANY.reset_index()  #인덱스 날림

COMPANY

COMPANY = COMPANY.rename(columns={'Date': 'ds', 'SAMSUNG_C': 'y'})

prop_model=Prophet(yearly_seasonality='auto',    # 	Fit yearly seasonality
     weekly_seasonality='auto',
     daily_seasonality='auto',
     changepoint_prior_scale=0.5,  # chainging_prior_scale : changepoint의 유연성 조절(default : 0.05), 높게잡으면, overfitting위험    
     changepoint_range=0.9,        # changepoint_range : 데이터중, 얼마나 반영해서 changeoint를 정할 것인지(default : 0.8) 
     mcmc_samples=0,
     interval_width=0.95
    )


# model = Prophet()
m_samsung = prop_model
m_samsung.add_country_holidays(country_name='KR')    # 국가(한국)의 휴일을 사용
m_samsung.fit(COMPANY)

from workalendar.asia import SouthKorea
kor_holidays = pd.concat([pd.Series(np.array(SouthKorea().holidays(2020))[:, 0]), pd.Series(np.array(SouthKorea().holidays(2021))[:, 0])]).reset_index(drop=True)

future_samsung = m_samsung.make_future_dataframe(periods=5)        # 예측 날짜 구간을 설정 : '5일'
future_samsung = future_samsung[future_samsung.ds.dt.weekday != 5]           # 금요일 배제
future_samsung = future_samsung[future_samsung.ds.dt.weekday != 6]           # 토요일 배제
for kor_holiday in kor_holidays:
    future_samsung = future_samsung[future_samsung.ds != kor_holiday]        # 휴일 배제
    
future_samsung

future_samsung = m_samsung.predict(future_samsung)
future_samsung.tail(20)

future_samsung[['ds','yhat','yhat_upper','yhat_lower']]

m_samsung.plot(future_samsung)

# 예측
fig2 = m_samsung.plot_components(future_samsung)

figure = m_samsung.plot(future_samsung)
for changepoint in m_samsung.changepoints:
    plt.axvline(changepoint,ls='--', lw=1)      # changing_point선 생성
figure.legend(loc=2)                            # 박스안 위치 조정

list(m_samsung.changepoints)

